## values.yaml

replicaCount: 1

kraft:
  enabled: true
  clusterId: "KraftCluster"
  replicationFactor: 1

image:
  registry: docker.io
  repository: bitnami/kafka
  tag: 3.5.1
  pullPolicy: IfNotPresent

auth:
  clientProtocol: plaintext
  interBrokerProtocol: plaintext
  sasl:
    enabled: false

persistence:
  enabled: false

resources:
  requests:
    cpu: 100m
    memory: 1024Mi
  limits:
    cpu: 500m
    memory: 1.5Gi

# ----------------------------
# Init-Container
# ----------------------------
extraInitContainers:
  - name: create-offsets-topic
    image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
    imagePullPolicy: {{ .Values.image.pullPolicy }}
    command:
      - sh
      - -c
      - |
        echo "üîÑ Waiting for Kafka broker..."
        # Î∏åÎ°úÏª§Í∞Ä Ï§ÄÎπÑÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
        until kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null 2>&1; do
          sleep 5
        done
        echo "Kafka is up, checking __consumer_offsets..."
        # ÌÜ†ÌîΩÏù¥ ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
        if ! kafka-topics.sh --bootstrap-server localhost:9092 \
            --describe --topic __consumer_offsets > /dev/null 2>&1; then
          echo "‚ûï Creating __consumer_offsets topic"
          kafka-topics.sh \
            --bootstrap-server localhost:9092 \
            --create \
            --topic __consumer_offsets \
            --partitions 5 \
            --replication-factor 1 \
            --config cleanup.policy=compact
        else
          echo "__consumer_offsets already exists"
        fi
    # Kafka Îç∞Ïù¥ÌÑ∞ Î≥ºÎ•® ÎßàÏö¥Ìä∏ (Bitnami chart Í∏∞Î≥∏)
    volumeMounts:
      - name: data
        mountPath: /bitnami/kafka/data

# Kafka Î∏åÎ°úÏª§ ÏÑ§Ï†ï
configurationOverrides:
  auto.create.topics.enable: true
  delete.topic.enable: true
  num.partitions: 3
  default.replication.factor: 1
  min.insync.replicas: 1
  offsets.topic.replication.factor: 1
  transaction.state.log.replication.factor: 1
  transaction.state.log.min.isr: 1
  log.retention.hours: 168
  log.retention.bytes: 1073741824
  connections.max.idle.ms: 600000
  request.timeout.ms: 30000
  retry.backoff.ms: 500

# ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑ§Ï†ï
listeners:
  client:
    protocol: PLAINTEXT
    name: PLAINTEXT
    advertisedListeners:
      - PLAINTEXT://eouil-services-kafka-controller-0.eouil-services-kafka-controller-headless.default.svc.cluster.local:9092

service:
  type: ClusterIP
  ports:
    client: 9092

metrics:
  kafka:
    enabled: false
  jmx:
    enabled: false
  serviceMonitor:
    enabled: false

zookeeper:
  enabled: false

logLevel: info
